generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model CommentVote {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime  @default(now()) @db.DateTime(0)
  deleted_at DateTime? @db.DateTime(0)
  user_id    Int       @db.UnsignedInt
  comment_id Int       @db.UnsignedInt
  upvoted    Int       @default(0) @db.SmallInt
  comments   Comment   @relation(fields: [comment_id], references: [id])
  users      User      @relation(fields: [user_id], references: [id])

  @@unique([user_id, comment_id], name: "uidx_comment_vote")
  @@index([comment_id], name: "comment_id")
  @@index([deleted_at], name: "idx_comment_votes_deleted_at")
  @@map("comment_votes")
}

model Comment {
  id            Int           @id @default(autoincrement()) @db.UnsignedInt
  created_at    DateTime      @default(now()) @db.DateTime(0)
  updated_at    DateTime      @default(now()) @db.DateTime(0)
  deleted_at    DateTime?     @db.DateTime(0)
  content       String        @db.Text
  score         Int           @default(0)
  user_name     String        @db.VarChar(255)
  post_id       Int           @db.UnsignedInt
  posts         Post          @relation("Comment_belongsToPost", fields: [post_id], references: [id])
  user          User          @relation("Comment_owner", fields: [user_name], references: [name])
  comment_votes CommentVote[]

  @@index([deleted_at], name: "idx_comments_deleted_at")
  @@index([post_id], name: "post_id")
  @@index([user_name], name: "user_name")
  @@map("comments")
}

model PostTagVote {
  id          Int     @id @default(autoincrement()) @db.UnsignedInt
  user_id     Int     @db.UnsignedInt
  post_tag_id Int     @db.UnsignedInt
  upvoted     Int     @default(0) @db.SmallInt
  tag         PostTag @relation(fields: [post_tag_id], references: [id])
  users       User    @relation(fields: [user_id], references: [id])

  @@unique([user_id, post_tag_id], name: "uidx_post_tag_vote")
  @@index([post_tag_id], name: "post_tag_id")
  @@map("post_tag_votes")
}

model PostTag {
  id             Int           @id @default(autoincrement()) @db.UnsignedInt
  score          Int           @default(0) @db.SmallInt
  tag_id         Int           @db.UnsignedInt
  post_id        Int           @db.UnsignedInt
  user_id        Int           @db.UnsignedInt
  post           Post          @relation("TagBelongsToPost", fields: [post_id], references: [id])
  tag            Tag           @relation(fields: [tag_id], references: [id])
  user           User          @relation(fields: [user_id], references: [id])
  post_tag_votes PostTagVote[]

  @@unique([tag_id, post_id], name: "uidx_post_tags")
  @@index([post_id], name: "post_id")
  @@index([user_id], name: "user_id")
  @@map("post_tags")
}

model Post {
  id                 Int           @id @default(autoincrement()) @db.UnsignedInt
  created_at         DateTime      @default(now()) @db.DateTime(0)
  updated_at         DateTime      @default(now()) @db.DateTime(0)
  deleted_at         DateTime?     @db.DateTime(0)
  url                String        @db.Text
  filename           String        @db.VarChar(255)
  user_name          String        @db.VarChar(255)
  score              Int           @default(0)
  content_type       String        @default("image") @db.VarChar(255)
  thumbnail_filename String        @default("") @db.VarChar(255)
  user_level         Int           @default(0) @db.TinyInt
  uploaded_filename  String        @db.Text
  user               User          @relation("Post_owner", fields: [user_name], references: [name])
  comments           Comment[]     @relation("Comment_belongsToPost")
  tags               PostTag[]     @relation("TagBelongsToPost")
  post_votes         post_votes[]  @relation("post_votesToposts")
  posts_phash        posts_phash[] @relation("postsToposts_phash") @ignore

  @@index([user_level], name: "idx_posts_userlevel")
  @@index([user_name], name: "user_name")
  @@map("posts")
}

model Tag {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  name       String    @unique @db.VarChar(32)
  user_level Int       @default(0) @db.TinyInt
  post_tags  PostTag[]

  @@index([user_level], name: "idx_tags_userlevel")
  @@map("tags")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model tmp_table {
  id               Int?
  hamming_distance Int?
  related_post     Int?

  @@ignore
}

model User {
  id             Int           @id @default(autoincrement()) @db.UnsignedInt
  created_at     DateTime      @default(now()) @db.DateTime(0)
  updated_at     DateTime      @default(now()) @db.DateTime(0)
  deleted_at     DateTime?     @db.DateTime(0)
  name           String        @unique @db.VarChar(255)
  email          String        @unique @db.VarChar(255)
  password       String        @db.VarChar(255)
  level          Int           @default(1) @db.TinyInt
  comment_votes  CommentVote[]
  comments       Comment[]     @relation("Comment_owner")
  post_tag_votes PostTagVote[]
  post_tags      PostTag[]
  post_votes     post_votes[]  @relation("post_votesTousers")
  posts          Post[]        @relation("Post_owner")

  @@index([level], name: "idx_user_level")
  @@index([deleted_at], name: "idx_users_deleted_at")
  @@map("users")
}

model post_votes {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime  @default(now()) @db.DateTime(0)
  deleted_at DateTime? @db.DateTime(0)
  upvoted    Int       @default(0) @db.SmallInt
  user_id    Int       @db.UnsignedInt
  post_id    Int       @db.UnsignedInt
  posts      Post      @relation("post_votesToposts", fields: [post_id], references: [id])
  users      User      @relation("post_votesTousers", fields: [user_id], references: [id])

  @@unique([user_id, post_id], name: "uidx_post_vote")
  @@index([deleted_at], name: "idx_post_votes_deleted_at")
  @@index([post_id], name: "post_votes_ibfk_2")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model posts_phash {
  post_id  Int    @db.UnsignedInt
  p_hash_0 BigInt @default(0) @db.UnsignedBigInt
  p_hash_1 BigInt @default(0) @db.UnsignedBigInt
  p_hash_2 BigInt @default(0) @db.UnsignedBigInt
  p_hash_3 BigInt @default(0) @db.UnsignedBigInt
  posts    Post   @relation("postsToposts_phash", fields: [post_id], references: [id])

  @@index([post_id], name: "Phash_belongsTo")
  @@ignore
}
